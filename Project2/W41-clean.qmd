---
title: Exercises week 41
subtitle: FYS-STK4155
author: Even Sletteng Garvang
format: pdf
---

Import libraries, gradient descent functions and utility functions.

```{python}
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

from gdfuns import *
from utils import *
```

```{python}

```

```{python}
np.random.seed(8923)

# generate data
n = 100
x = np.linspace(-2, 2, n)
f_x = data_function(x)
y = f_x + np.random.normal(0, 1, n)
y = y.reshape(-1,1)

# create design matrix of polynomials
# for now 3rd order reflecting data function
X = PolynomialFeatures(10).fit_transform(x.reshape(-1, 1))
X = X[:,1:]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

scalerx = StandardScaler()
X_train_scaled = scalerx.fit_transform(X_train)
X_test_scaled = scalerx.transform(X_test)

scalery = StandardScaler()
y_train_scaled = scalerx.fit_transform(y_train)
y_test_scaled = scalerx.transform(y_test)


plt.plot(X_train_scaled[:,0], y_train_scaled, "o")
plt.show()
```

Here we have a polynomial up to 

```{python}
eta = 0.001
n_iter = 1000
GD(X, y, eta, n_iter)
GD(X, y, eta, n_iter, gradient_fun=gradient_ridge, gradient_args={"lmb":0.1})
```


```{python}
eta = 0.001
n_iter = 1000
lmbs=np.logspace(-2,2,20)
mse=np.zeros(len(lmbs))

for i in range(len(lmbs)):
    theta = GD(X_train_scaled, y_train_scaled, eta, n_iter, gradient_fun=gradient_ridge, gradient_args={"lmb":lmbs[i]})
    y_pred = X_test @ theta
    mse[i] = mean_squared_error(y_test_scaled, y_pred)


plt.plot(lmbs, mse)
plt.semilogx()
plt.show()

M=5
n_epochs = 100
thetas = []

for i in range(len(lmbs)):
    theta = SGD(X_train_scaled, y_train_scaled, eta, M, n_epochs, gradient_fun=gradient_ridge, gradient_args={"lmb":lmbs[i]})
    y_pred = X_test @ theta
    mse[i] = mean_squared_error(y_test_scaled, y_pred)
    thetas.append(theta)


plt.plot(lmbs, mse)
plt.semilogx()
plt.show()
```


```{python}
print(thetas[-1])
```